
1.3 Compare Swing and AWT elements

a. So sánh các container cấp cao nhất

| Đặc điểm                                      | AWT    | Swing   |
| --------------------------------------------- | ------ | ------- |
| Cửa sổ chính (Main Window Container)          | Frame  | JFrame  |
| Hộp thoại (Dialogs)                           | Dialog | JDialog |
| Container không cửa sổ (Windowless Container) | Panel  | JPanel  |

---

b. So sánh các thành phần khác

| Thành phần                  | AWT           | Swing           |
| --------------------------- | ------------- | --------------- |
| Nhãn (Label)                | Label         | JLabel          |
| Nút (Button)                | Button        | JButton         |
| Ô nhập văn bản (Text Field) | TextField     | JTextField      |
| Vùng văn bản (Text Area)    | TextArea      | JTextArea       |
| Menu                        | Menu, MenuBar | JMenu, JMenuBar |
| Container                   | Panel, Frame  | JPanel, JFrame  |

---

c. So sánh xử lý sự kiện

| Khía cạnh                                | AWT                                                       | Swing                                       |
| ---------------------------------------- | --------------------------------------------------------- | ------------------------------------------- |
| Mô hình sự kiện (Event Model)            | Mô hình phân công sự kiện cũ (Old Event Delegation Model) | Cùng mô hình nhưng linh hoạt hơn            |
| Giao diện Listener (Listener Interfaces) | Có (ví dụ: ActionListener)                                | Giống nhau                                  |
| Mô hình đa luồng (Threading Model)       | Không có luồng rõ ràng để cập nhật                        | Yêu cầu sử dụng Event Dispatch Thread (EDT) |

---

**Trả lời tổng quát hơn**

1. Container cấp cao nhất
   Cả AWT và Swing đều cung cấp container cấp cao nhất để chứa các thành phần, nhưng chúng khác nhau về thiết kế:

* AWT sử dụng Frame, Dialog và Applet.
* Swing cung cấp các phiên bản nâng cao: JFrame, JDialog và JApplet.
* Container của Swing là nhẹ (lightweight) và hỗ trợ root pane cùng với khả năng thay đổi giao diện (pluggable look and feel), trong khi AWT là container nặng (heavyweight) phụ thuộc vào hệ điều hành.

2. Tên lớp thành phần

* AWT và Swing cung cấp các thành phần tương tự, nhưng Swing có tiền tố "J" và linh hoạt hơn.
* Thành phần Swing được viết hoàn toàn bằng Java và hỗ trợ tùy chỉnh, trong khi AWT dựa vào mã gốc của hệ điều hành.

3. Xử lý sự kiện

* Cả AWT và Swing sử dụng mô hình phân công sự kiện (Event Delegation Model), với các lớp sự kiện và giao diện listener như ActionEvent, MouseListener.
* Trong Swing, xử lý sự kiện thường được thực hiện với anonymous inner classes hoặc biểu thức lambda.
* Swing yêu cầu cập nhật giao diện phải được thực hiện trên Event Dispatch Thread (EDT) để đảm bảo an toàn đa luồng, trong khi AWT ít nghiêm ngặt hơn.

4. Giao diện và phong cách (Appearance and Look & Feel)

* AWT sử dụng giao diện hệ điều hành gốc (native OS look and feel), hạn chế khả năng tùy chỉnh.
* Swing hỗ trợ pluggable look and feel, cho phép tùy chỉnh giao diện và sử dụng giao diện đa nền tảng.

---

**Yêu cầu: Lưu ý cách mã kiểm tra xem Media có triển khai giao diện Playable để tạo nút "Play" hay không.**

Khi hiển thị các mặt hàng phương tiện trong cửa hàng, một số như DVD hoặc CD có thể phát được, trong khi sách thì không. Để xử lý tình huống này trong chương trình, chúng ta sử dụng giao diện Playable.

* Playable interface giống như một hợp đồng — bất kỳ phương tiện nào có thể phát sẽ triển khai giao diện này và cung cấp phương thức play().
* Khi tạo nút cho từng phương tiện, chỉ hiển thị nút "Play" nếu phương tiện đó triển khai Playable.
* Sử dụng từ khóa instanceof trong Java để kiểm tra đối tượng có triển khai Playable hay không.
* Khi nhấn nút "Play", chuyển kiểu đối tượng thành Playable và gọi phương thức play(), biết chắc chắn rằng nó sẽ hoạt động.

---
